
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of negative words (<0) contained in src.
#
# Suhail Alnahari, 5213352
#
# The base code had a while loop with very few instructions
# So to prevent the numerous jumps back to the start of the loop after each element,
# I unrolled the loop to only jump back every five elements (Loop0~Loop5), so 
# mulitplied effectiveness of jump back by 5.
# To prevent load data hazards I gathered all the data from memory then
# processed the information. I used addition of 8 bytes to go from one
# element to the other. If the number of elements left to be processed is
# less than 5 (Less), then I handled every case of less than 5 in a seperate block.
# 4 left (Loop12), 3 left (Loop13), 2 left (Loop14), 1 left (Loop15), 0 left (Done).
# if the number of elements left to be processed is more than 5, then I added
# the size of elements, just processed by the current loop (40 bytes), to both src
# and dst (initialize) and then jumped back to start the loop.
# 
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################

# You can modify this portion
  # Loop header
  xorq %rax,%rax    # count = 0;
  iaddq  $-5, %rdx    # len - 5 (elements)
  jl Less      # if length is less than 5 goto Less:

Loop0:
  mrmovq (%rdi), %r9  # read val from src...
  mrmovq 8(%rdi), %r10  # read val from src...
  mrmovq 16(%rdi), %r11  # read val from src...
  mrmovq 24(%rdi), %r12  # read val from src...
  mrmovq 32(%rdi), %r13  # read val from src...
  rmmovq %r9, (%rsi)  # ...and store it to dst
  rmmovq %r10, 8(%rsi)  # ...and store it to dst
  rmmovq %r11, 16(%rsi)  # ...and store it to dst
  rmmovq %r12, 24(%rsi)  # ...and store it to dst
  rmmovq %r13, 32(%rsi)  # ...and store it to dst
  andq %r9, %r9    # val > 0?
  jg Loop2    # if so, goto next element Loop2:
  iaddq $1, %rax    # count++
  
Loop2:
  andq %r10, %r10    # val > 0?
  jg Loop3    # if so, goto next element Loop3:
  iaddq $1, %rax    # count++

Loop3:  
  andq %r11, %r11    # val > 0?
  jg Loop4    # if so, goto next element Loop4:
  iaddq $1, %rax    # count++
  
Loop4: 
  andq %r12, %r12    # val > 0?
  jg Loop5    # if so, goto next element Loop5:
  iaddq $1, %rax    # count++

Loop5: 
  andq %r13, %r13    # val > 0?
  jg initialize    # if so, goto next element Loop5:
  iaddq $1, %rax    # count++

initialize:
  iaddq $40, %rdi    # src + 40
  iaddq $40, %rsi    # dst + 40  

Npos:  
  iaddq  $-5, %rdx   # len - 5
  jge Loop0            # if elements are more than 5, goto Loop:

Less:
  iaddq  $1, %rdx    # len++ 4 elements left
  je Loop12	     # process elements left goto Loop12:
  iaddq  $1, %rdx    # len++ 3 elements left
  je Loop13	     # process elements left goto Loop13:
  iaddq  $1, %rdx    # len++ 2 elements left 
  je Loop14 	     # process elements left goto Loop14:
  iaddq  $1, %rdx    # len++ 1 element left
  je Loop15	     # process element left goto Loop15:
  jmp Done	     # 0 elements Done

Loop12: 
  mrmovq (%rdi), %r9  # read val from src...
  mrmovq 8(%rdi), %r10  # read val from src...
  mrmovq 16(%rdi), %r11  # read val from src...
  mrmovq 24(%rdi), %r12  # read val from src...
  rmmovq %r9, (%rsi)  # ...and store it to dst
  rmmovq %r10, 8(%rsi)  # ...and store it to dst
  rmmovq %r11, 16(%rsi)  # ...and store it to dst
  rmmovq %r12	, 24(%rsi)  # ...and store it to dst
  andq %r9, %r9     # val > 0?
  jg Loop12_2       # if so, goto Loop12_2:
  iaddq $1, %rax    # count++
Loop12_2:
  andq %r10, %r10   # val > 0?
  jg Loop12_3       # if so, goto Loop12_3:
  iaddq $1, %rax    # count++
Loop12_3:
  andq %r11, %r11   # val > 0?
  jg Loop12_4       # if so, goto Loop12_4:
  iaddq $1, %rax    # count++
Loop12_4:
  andq %r12, %r12   # val > 0?
  jg Done           # if so, goto Done:
  iaddq $1, %rax    # count++
  jmp Done


Loop13: 
  mrmovq (%rdi), %r9  # read val from src...
  mrmovq 8(%rdi), %r10  # read val from src...
  mrmovq 16(%rdi), %r11  # read val from src...
  rmmovq %r9, (%rsi)  # ...and store it to dst
  rmmovq %r10, 8(%rsi)  # ...and store it to dst
  rmmovq %r11, 16(%rsi)  # ...and store it to dst
  andq %r9, %r9     # val > 0?
  jg Loop13_2       # if so, goto Loop13_2:
  iaddq $1, %rax    # count++
Loop13_2:
  andq %r10, %r10   # val > 0?
  jg Loop13_3       # if so, goto Loop13_3:
  iaddq $1, %rax    # count++
Loop13_3:
  andq %r11, %r11   # val > 0?
  jg Done           # if so, goto Done:
  iaddq $1, %rax    # count++
  jmp Done

Loop14:  
  mrmovq (%rdi), %r9  # read val from src...
  mrmovq 8(%rdi), %r10  # read val from src...
  rmmovq %r9, (%rsi)  # ...and store it to dst
  rmmovq %r10, 8(%rsi)  # ...and store it to dst
  andq %r9, %r9     # val > 0?
  jg Loop14_2       # if so, goto Loop14_2:
  iaddq $1, %rax    # count++
Loop14_2:
  andq %r10, %r10   # val > 0?
  jg Done    	    # if so, goto Done:
  iaddq $1, %rax    # count++
  jmp Done

Loop15:
  mrmovq (%rdi), %r9  # read val from src...
  rmmovq %r9, (%rsi)  # ...and store it to dst
  andq %r9, %r9     # val > 0?
  jg Done   	    # if so, goto Done:
  iaddq $1, %rax    # count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

